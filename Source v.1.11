/*
Stuff to do:
Make sure inputs can only be numbers for the menu
Create 1-2 more functions..?
Clean up and improve
*/

#define _CRT_SECURE_NO_DEPRECATE  //  NEEDED FOR CTIME RNG
#include <iostream>
#include <string>
#include <fstream>        // Needed to use 
#include<ctime>
#include<cstdlib>
#include <stdio.h>
using namespace std;

void displayMenu();
void getChoice();
void registration();
void login();
void createMonster();
void arena();
void adminBuild();
void playerBuild();
void monsterReg();

bool check = false;
int menu;  //  Menu input
const int min = 1, max = 8;  //  Check if the menu input is good

//  Int main for other programs
int main()
{
	do
	{
		displayMenu();
		if (menu == 1)
		{
			registration();
		}
		if (menu == 2)
		{
			login();
		}
		if (menu == 3)
		{
			createMonster();
		}
		if (menu == 4)
		{
			arena();
		}
		if (menu == 5)
		{
			playerBuild();
		}
		if (menu == 6)
		{
			adminBuild();
		}
		if (menu == 7)
		{
			monsterReg();
		}
	} while (menu != 8);

	cout << "Goodbye!" << endl;
	return 0;
}

//  Menu
void displayMenu()
{

	string stars = "********************";

	cout << stars << stars << endl;
	cout << "Hello user!  What would you like to do?" << endl;
	cout << stars << stars << endl;
	cout << stars << stars << endl;
	cout << "1...Register" << endl
		<< "2...Login" << endl
		<< "3...Create a Monster" << endl
		<< "4...Enter the arena" << endl
		<< "5...See player log" << endl
		<< "6...See masterlog" << endl
		<< "7...See the Monster Registry" << endl
		<< "8...Exit the program" << endl;
	cout << stars << stars << endl;
	cin >> menu;
	getChoice();
}

// Check input for the menu
void getChoice()
{
	while (menu < min || menu > max)
	{
		while (cin.fail())
		{
			cin.clear();
			cin.ignore();
		}
		cout << "Invalid input." << endl;
		cin >> menu;
	}
}

//  Registration prompt
void registration()
{
	ofstream outputFile;
	string username, password;
	int admin;

	// Register a username
	{
		do
		{
		cout << "Please enter your username." << endl;
		cout << "Username: ";
		cin >> username;
		cout << endl;
		if (username.length() < 6)
		{
			cout << "Username length must be at least 6 characters long." << endl;
		}
		} while (username.length() < 6);
	//  Check if the user is an admin or a player.

		do
		{
			cout << "Are you a player, or an administrator?" << endl;
			cout << "1...I am a player." << endl;
			cout << "2...I am an administrator" << endl;
			cin >> admin;
			switch (admin)
			{
			case 1:
			{
				username += "_player.txt";
				check = true;
				break;
			}
			case 2:
			{
				username += "_admin.txt";
				check = true;
				break;
			}
			default:
				cout << "Response not recognized." << endl;
			}
		} while (check != true);


		outputFile.open(username.c_str());  //  create a file for the new user.
	}
//  Create password.
	do
	{
		cout << "Password: ";
		cin >> password;
		if (password.length() < 6)
		{
			cout << "password length must be at least 6 characters long." << endl;
		}
	} while (password.length() < 6);
	
		// write the names to the file
		outputFile << password << endl;

	// close the file
	outputFile.close();

	cout << "registration complete!" << endl;

	cout << string(50, '\n');
}

//  Login prompt
void login()
{
		string username, password, info;
		int admin;

		// Get the filename from the user
		cin.ignore();
		cout << "Please enter your username:  ";
		cin >> username;

		//  Ask if the user is an administrator.
		do
		{
	
			cout << "Are you an admin?" << endl;
			cout << "1...No, I am not an admin." << endl;
			cout << "2...Yes, I am an admin." << endl;
			cin >> admin;
			switch (admin)
			{
			case 1:
			{
				username += "_player.txt";
				// Open the input file
				ifstream inputFile(username.c_str());

				// If the file successfully opened, process it
				if (inputFile)
				{
					// Prompt user for password
					cout << "Please enter your password:  ";
					cin >> password;
					// Read password
					string strInput;
					getline(inputFile, strInput);
					if (password == strInput)
					{
						cout << string(50, '\n');
						cout << "Hello, " << username << "!" << endl;
						cout << "Welcome back!" << endl;
						check = true;
						break;
					}
					else
						cout << string(50, '\n');
						cout << "Wrong password." << endl;
					// Close the file.
					inputFile.close();
					check = true;
					break;
				}
				else
				{
					cout << string(50, '\n');
					// Display an error message
					cout << "Username not recognized." << endl;
				}
			}
			case 2:
			{
				username += "_admin.txt";
				// Open the input file
				ifstream inputFile(username.c_str());

				// If the file successfully opened, process it
				if (inputFile)
				{
					// Prompt user for password
					cout << "Please enter your password:  ";
					cin >> password;
					// Read password
					string strInput;
					getline(inputFile, strInput);
					if (password == strInput)
					{
						cout << string(50, '\n');
						cout << "Hello, " << username << "!" << endl;
						cout << "Welcome back!" << endl;
						check = true;
						break;
					}
					else
						cout << string(50, '\n');
						cout << "Wrong password." << endl;

					// Close the file.
					inputFile.close();
					check = true;
					break;
				}
				else
				{
					// Display an error message
					cout << string(50, '\n');
					cout << "Username not recognized." << endl;
				}
			}
			default:
				cout << "Response not recognized." << endl;
			}
		} while (check != true);


}

//  Create monster function.
void createMonster()
{
	ofstream outputMonster;
	int goodAnswer = 0,
		monsterDamage;
	string monsterName;

	cout << "Please name the monster." << endl;
	cin.ignore();
	getline(cin, monsterName);
	outputMonster.open(monsterName.c_str());  //  Create a file for the new monster.

	//  create base damage for the monster
	cout << "How much base damage does the monster have?" << endl;
	cin >> monsterDamage;
	//  Begin loop.
	while (goodAnswer <= 1)
	{
		if (cin.fail())
		{
			cout << "Must be a positive number." << endl;
			cin.clear();
			cin.ignore();
		}
		else
			outputMonster << monsterDamage << endl;
		cout << "Monster creation success!  " << endl <<
			monsterName << " has a base damage of " << monsterDamage << endl;
		break;
	}

	system("pause");
	cout << string(50, '\n');
}

//  AND MY AXE
void arena()
{
	//  Initialize
	ifstream inputFile;
	ofstream fout,
		fout2;
	string monster,
		player;
	int number;
	bool pseudologin = false;


	//  The fun stuff :^)  // skillz
	int monsterHP = 100,  // Health
		playerHP = 100,
		newMonsterHP,
		newPlayerHP;
	int hit,  //  hit rate
		sdam,  //  sword damage
		fdam,  //  fireball damage
		mdam, //  monster damage
		skills;


	// Pseudologin to track stats
	do
	{
		cin.ignore();
		cout << "Insert username, player." << endl;
		getline(cin, player);
		player += "_player.txt";
		inputFile.open(player);
		if (!inputFile)
		{
			cout << "Player name not recognized!" << endl;
		}
		else
			inputFile.close();
		inputFile.clear();
		pseudologin = true;
	} while (pseudologin != true);

	// Ask for monster
	cout << "Welcome to the arena, who would you like to fight?" << endl;
	getline(cin, monster);

	// Open the input file
	inputFile.open(monster.c_str());

	// If the file successfully opened, process it
	if (inputFile)
	{
		// Read the numbers from the file and display them
		while (inputFile >> number)
			cout << "You are now fighting " << monster << "!" << endl;
	Fight:
		//  Establish RNG
		srand(time(NULL));
		hit = rand() % 20 + 1;  //  Accuracy
		sdam = rand() % 20 + 11;   //  slash damage 10-30, 90% chance to hit
		fdam = rand() % 30 + 11;  //  fireball damage 20-40, 75% chance to hit
		mdam = rand() % 20 + 1;  //  1-20, + base

		cout << "Would you like to use your sword, or fireball?" << endl;
		cout << "1 = Sword Slash" << endl
			<< "2 = Fireball" << endl;
		cin >> skills;
		switch (skills)
		{
			//  If the user picks slash
		case 1:
		{
			cout << "You ready your sword..." << endl << endl;
			system("pause");
			if (hit <= 18)
			{
				newMonsterHP = monsterHP - sdam;
				monsterHP = newMonsterHP;
				cout << "You hit " << monster << " for " << sdam << " damage with your sword!" << endl;
				cout << monster << " has " << newMonsterHP << " HP remaining." << endl << endl;

				//  Monster's turn
				if (hit <= 16)
				{
					newPlayerHP = playerHP - (mdam + number);
					playerHP = newPlayerHP;
					cout << monster << " has hit you for " << (mdam + number) << " damage!" << endl;
					cout << "You have " << newPlayerHP << " HP remaining." << endl << endl;

					goto Check;
				}
				else
					cout << monster << " missed!" << endl << endl;
				goto Check;

			}
			else
				cout << "You missed!" << endl;
			if (hit <= 16)
			{
				newPlayerHP = playerHP - (mdam + number);
				playerHP = newPlayerHP;
				cout << monster << " has hit you for " << (mdam + number) << " damage!" << endl;
				cout << "You have" << newPlayerHP << " HP remaining." << endl << endl;

				goto Check;
			}
			else
				cout << monster << " missed!" << endl << endl;
			goto Check;
			break;
		}
		//  If the user picks fireball
		case 2:
		{
			cout << "Your hands begin to glow orange..." << endl << endl;
			system("pause");
			if (hit <= 15)
			{
				newMonsterHP = monsterHP - fdam;
				monsterHP = newMonsterHP;
				cout << "You hit " << monster << " for " << fdam << " damage with your fireball!" << endl;
				cout << monster << " has " << newMonsterHP << " HP remaining." << endl << endl;

				//  Monster's turn
				if (hit <= 16)
				{
					newPlayerHP = playerHP - (mdam + number);
					playerHP = newPlayerHP;
					cout << monster << " has hit you for " << (mdam + number) << " damage!" << endl;
					cout << "You have " << newPlayerHP << " HP remaining." << endl << endl;

					goto Check;
				}
				else
					cout << monster << " missed!" << endl << endl;
				goto Check;

			}
			else
				cout << "You missed!" << endl;
			if (hit <= 16)
			{
				newPlayerHP = playerHP - (mdam + number);
				playerHP = newPlayerHP;
				cout << monster << " has hit you for " << (mdam + number) << " damage!" << endl;
				cout << "You have" << newPlayerHP << " HP remaining." << endl << endl;

				goto Check;
			}
			else
				cout << monster << " missed!" << endl << endl;
			goto Check;
			break;
		}
		//  Cmon man..
		default:
			cout << "I don't know what that means...." << endl;
			goto Fight;
		}

	Check:
		{
			time_t tim;   // get time now
			time(&tim);

			//  check if the player has killed the monster
			if (monsterHP <= 0)
			{
				cout << monster << " has been slain!" << endl;
				system("pause");
				inputFile.close();
				inputFile.clear();
				//  close the monster file
				fout.open("data.txt", ios::app);
				fout << player << "   " << number + 100 << " XP ";
				fout << monster << "    Victory  " << ctime(&tim);
				cout << "You have gained " << number + 100 << " XP!" << endl;
				//  insert the data into the masterlog
				inputFile.close();
				inputFile.clear();
				//  close the masterlog

				fout2.open(player, ios::app);
				fout2 << number + 100 << " XP ";
				fout2 << monster << "    Victory  " << ctime(&tim) << endl;
				//  insert the data into the playerlog

			}
			//  check if the monster has killed the player
			else if (playerHP <= 0)
			{
				cout << "You have been slain..." << endl;
				system("pause");
				inputFile.close();
				inputFile.clear();
				//  close the monster file
				fout.open("data.txt", ios::app);
				fout << player << "   " << monster << "    Defeat  " << ctime(&tim);
				inputFile.close();
				inputFile.clear();
				//  insert the data into the masterlog, close it
				fout2.open(player, ios::app);
				fout2 << monster << "    Defeat  " << ctime(&tim);
				//  insert the data into the player log

			}
			else goto Fight;
		}

		// Close the file.
		inputFile.close();
	}
	else
	{
		// Display an error message
		cout << "We do not know of " << monster << " maybe if we catch one, you can fight one." << endl;
	}
	system("pause");
	cout << string(50, '\n');
}


//  Access the playerlog
void playerBuild()
{
	ifstream inputFile;
	string filename2, playerText2;
	int number;
	cin.ignore();

	// Get the filename from the user
	cout << "Enter the user you wish to see: ";
	cin >> filename2;

	// Open the input file
	filename2 += "_player.txt";
	inputFile.open(filename2.c_str());

	// If the file successfully opened, process it
	if (inputFile)
	{
		// Read the numbers from the file and display them
		while (getline(inputFile, playerText2))
		{
			while (!inputFile.eof())
			{
				getline(inputFile, playerText2);
				cout << playerText2 << endl;
			}
		}
		inputFile.close();
		system("pause");
	}
	else
	{
		// Display an error message
		cout << "Player could not be found!" << endl;
		system("pause");
	}
	cout << string(50, '\n');

}

//  LOAD MY MASTERLOG FAM ============================================================
void adminBuild()
{
	ifstream file;
	string text, adminCheck, password, strInput;
	cin.ignore();

	cout << "Please enter your username, admin." << endl;
	cin >> adminCheck;
	adminCheck += "_admin.txt";
	ifstream inputFile2(adminCheck.c_str());

	if (!inputFile2)
	{
		cout << string(50, '\n');
		cout << "Admin account not recognized..." << endl;
	}
	else
	{
		// Prompt user for password
		cout << "Please enter your password:  ";
		cin >> password;
		// Read password
		getline(inputFile2, strInput);
		if (password == strInput)
		{
			inputFile2.close();
			inputFile2.clear();
			//open the input file
			file.open("data.txt");

			//if file is not empty, read line by line
			while (getline(file, text))
			{
				cout << text << endl;
			}
			file.close();
			system("pause");
			cout << string(50, '\n');
		}
		else
			cout << "Incorrect password!" << endl;
		inputFile2.close();
	}
}

//  Pull up monster registry
void monsterReg()
{
	ifstream inputFile;
	string filename3, playerText3;
	int number;
	cin.ignore();

	// Get the filename from the user
	cout << "Enter the monster you want to see: " << endl;
	cin >> filename3;

	// Open the input file
	inputFile.open(filename3.c_str());

	// If the file successfully opened, process it
	if (inputFile)
	{
		// Read the numbers from the file and display them
		while (getline(inputFile, playerText3))
		{
			cout << "The monster " << filename3 << " has 100 HP." << endl
				<< "A base damage of " << playerText3 << "." << endl << endl;
			int damage = atoi(playerText3.c_str());
			if (damage <= 5)
			{
				cout << "According to our database, this monster is pretty weak.." << endl;
			}
			else if (damage > 5 && damage <= 10)
			{
				cout << "It appears that this monster is below average..." << endl;
			}
			else if (damage > 10 && damage <= 15)
			{
				cout << "It appears that this monster is average!" << endl;
			}
			else if (damage > 15 && damage <= 20)
			{
				cout << "It appears that this monster is strong, be careful!" << endl;
			}
			else if (damage > 20)
			{
				cout << "This monster is extremely powerful!!!" << endl;
			}
		}
		inputFile.close();
		system("pause");
	}
	else
	{
		// Display an error message
		cout << "Monster could not be found!  Maybe we can catch one..." << endl;
		system("pause");
	}
	cout << string(50, '\n');

}
